{"version":3,"sources":["webpack:///./src/components/_shared/styled-text-section.js","webpack:///./src/components/project-list.js","webpack:///./src/pages/projects.js","webpack:///./src/components/_shared/styled-separator.js","webpack:///./src/components/tech-list.js","webpack:///./src/components/_shared/styled-headings.js","webpack:///./src/components/_shared/styled-content-link.js","webpack:///./src/components/_shared/styled-image-container.js"],"names":["StyledTextSection","styled","section","contentBox","StyledProjectContainer","article","mq","gt","xs","StyledProject","StyledHeader","header","StyledLinkContainer","flexEnd","StyledInfoContainer","StyledProjectText","ProjectList","myProjects","projects","map","project","title","frontmatter","link","fields","slug","demoLink","demo_link","repoLink","repo_link","ioslink","ios_link","androidLink","android_link","coverImage","cover_image","childImageSharp","fluid","description","demoLinkLabel","repoLinkLabel","iosLinkLabel","androidLinkLabel","key","href","rel","target","aria-label","icon","prefix","hasHover","techs","StyledProjectsH1","StyledH1","pageQuery","Projects","nodes","data","allMarkdownRemark","console","log","menuLinks","blogMenuLinks","StyledSeparator","div","StyledTechContainer","StyledTag","span","TechList","tech","h1","StyledH2","h2","StyledH3","h3","StyledContentLink","a","StyledImageContainer","StyledStaticImageContainer"],"mappings":"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","file":"component---src-pages-projects-js-2bbad089fb29d6827e5d.js","sourcesContent":["import styled from '@emotion/styled';\nimport { contentBox } from './styled-mixins';\n\nexport const StyledTextSection = styled.section`\n  white-space: pre-line;\n\n  ${contentBox}\n  max-width: unset;\n  max-height: 180px;\n  position: relative;\n  padding: 10px;\n  margin: 0;\n\n  > p {\n    height: 100%;\n    margin: 0;\n    font-size: 0.8rem;\n    overflow: hidden;\n  }\n`;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\nimport Img from 'gatsby-image';\nimport TechList from './tech-list';\nimport { mq } from './_shared/media';\nimport { StyledImageContainer } from './_shared/styled-image-container';\nimport { StyledContentLink } from './_shared/styled-content-link';\nimport { StyledH2 } from './_shared/styled-headings';\nimport { flexEnd } from './_shared/styled-mixins';\nimport { StyledTextSection } from './_shared/styled-text-section';\n\nconst StyledProjectContainer = styled.article`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 2.5rem;\n  margin-top: 2.5rem;\n\n  ${mq.gt.xs} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\n\nconst StyledProject = styled.article`\n  display: flex;\n  flex-direction: column;\n  padding-top: 2.5rem;\n`;\nconst StyledHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\nconst StyledLinkContainer = styled.section`\n  ${flexEnd};\n  margin: 10px 0;\n\n  & > a {\n    display: flex;\n    justify-content: left;\n    align-items: center;\n    color: var(--body-color);\n\n    &:hover {\n      color: var(--primary-color);\n    }\n  }\n\n  & svg {\n    fill: currentColor;\n    margin: 0 0.5rem;\n  }\n`;\nconst StyledInfoContainer = styled.section`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\nconst StyledProjectText = styled(StyledTextSection)`\n  > p {\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n    overflow: hidden;\n  }\n`;\n\nconst ProjectList = ({ projects }) => {\n  const myProjects = projects.map((project) => {\n    const title = project.frontmatter.title;\n    const link = `/projects` + project.fields.slug;\n    const demoLink = project.frontmatter.demo_link;\n    const repoLink = project.frontmatter.repo_link;\n    const ioslink = project.frontmatter.ios_link;\n    const androidLink = project.frontmatter.android_link;\n    const coverImage = project.frontmatter.cover_image ? project.frontmatter.cover_image.childImageSharp.fluid : null;\n    const description = project.frontmatter.description;\n    const demoLinkLabel = `featured project ${title} demo`;\n    const repoLinkLabel = `featured project ${title} repo`;\n    const iosLinkLabel = `featured project ${title} App store`;\n    const androidLinkLabel = `featured project ${title} Play store`;\n\n    return (\n      <StyledProject key={title}>\n        <StyledHeader>\n          <StyledContentLink href={link ? link : demoLink ? demoLink : repoLink ? repoLink : ioslink ? ioslink: '#'} rel=\"noopener\">\n            <StyledH2>{title}</StyledH2>\n          </StyledContentLink>\n          <StyledLinkContainer>\n            {demoLink && (\n              <a href={demoLink} target=\"_blank\" rel=\"noreferrer\" title=\"Demo Link\" aria-label={demoLinkLabel}>\n                <Icon icon=\"itch-io\" prefix=\"fab\" />\n              </a>\n            )}          \n            {repoLink && (\n              <a href={repoLink} target=\"_blank\" rel=\"noreferrer\" title=\"Repo Link\" aria-label={repoLinkLabel}>\n                <Icon icon=\"github\" prefix=\"fab\" />\n              </a>\n            )}\n            {ioslink && (\n              <a href={ioslink} target=\"_blank\" rel=\"noreferrer\" title=\"Ios Link\" aria-label={iosLinkLabel}>\n                <Icon icon=\"apple\" prefix=\"fab\" />\n              </a>\n            )}\n\n            {androidLink && (\n              <a href={androidLink} target=\"_blank\" rel=\"noreferrer\" title=\"Android Link\" aria-label={androidLinkLabel}>\n              <Icon icon=\"android\" prefix=\"fab\" />\n            </a>\n            )}\n          </StyledLinkContainer>\n        </StyledHeader>\n        <a\n          aria-label={demoLink ? demoLinkLabel : repoLink ? repoLinkLabel : `featured project ${title}`}\n          href={link ? link : demoLink ? demoLink : repoLink ? repoLink : '#'}\n          rel=\"noopener\"\n        >\n          {coverImage && (\n            <StyledImageContainer hasHover>\n              <Img fluid={coverImage} />\n            </StyledImageContainer>\n          )}\n        </a>\n        <StyledInfoContainer>\n          <StyledProjectText><p>{description}</p></StyledProjectText>\n          <TechList techs={project.frontmatter.techs} />\n        </StyledInfoContainer>\n      </StyledProject>\n    );\n  });\n\n  return (\n    <StyledProjectContainer>{myProjects}</StyledProjectContainer>\n  );\n};\n\nProjectList.propTypes = {\n  projects: PropTypes.array.isRequired,\n};\n\nexport default ProjectList;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport Layout from '../components/layout';\nimport ProjectList from '../components/project-list';\nimport SEO from '../components/seo';\nimport { blogMenuLinks } from '../components/_config/menu-links';\nimport { StyledH1 } from '../components/_shared/styled-headings';\nimport { StyledFullHeightSection } from '../components/_shared/styled-section';\nimport { StyledSeparator } from '../components/_shared/styled-separator';\n\nconst StyledProjectsH1 = styled(StyledH1)`\n  margin-top: 3rem;\n`;\nconst Projects = ({\n  data: {\n    allMarkdownRemark: { nodes },\n  },\n}) => {\n  console.log(nodes);\n  return (\n    <Layout menuLinks={blogMenuLinks}>\n      <SEO title=\"Projects\" />\n      <StyledFullHeightSection>\n        <StyledProjectsH1>Projects</StyledProjectsH1>\n        <StyledSeparator />\n        <ProjectList projects={nodes} />\n      </StyledFullHeightSection>\n    </Layout>\n  );\n};\n\nexport default Projects;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { order: ASC, fields: frontmatter___order}\n      filter: { fileAbsolutePath: { regex: \"/content/projects/\" } }\n    ) {\n      nodes {\n        frontmatter {\n          date(formatString: \"D MMMM, YYYY\")\n          title\n          repo_link\n          demo_link\n          ios_link\n          android_link\n          techs\n          tags\n          description\n          cover_image {\n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        html\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledSeparator = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 3rem;\n  background-color: var(--body-color);\n`;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\n\nconst StyledTechContainer = styled.section`\n  margin-top: 0.8rem;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst StyledTag = styled.span`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n  font-size: 0.8rem;\n\n  color: var(--body-color);\n  margin: 0 1rem 0.5rem 0;\n\n  & > svg {\n    color: var(--primary-color);\n    height: 0.8rem;\n    margin-right: 0.25rem;\n  }\n`;\n\nconst TechList = ({ techs }) => {\n  return (\n    <StyledTechContainer>\n      {techs.map((tech) => (\n        <StyledTag key={tech}>\n          <Icon icon=\"caret-right\" />\n          {tech}\n        </StyledTag>\n      ))}\n    </StyledTechContainer>\n  );\n};\n\nTechList.propTypes = {\n  techs: PropTypes.array.isRequired,\n};\n\nexport default TechList;\n","import styled from '@emotion/styled';\n\nexport const StyledH1 = styled.h1`\n  width: 100%;\n  position: relative;\n  font-weight: 800;\n  margin: 20px 0;\n  color; var(--title-color);\n\n  &:first-letter {\n    color: var(--primary-color);\n  }\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -30px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n\nexport const StyledH2 = styled.h2`\n  color: var(--title-color);\n  margin: 20px 0;\n  position: relative;\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -20px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n\nexport const StyledH3 = styled.h3`\n  color: var(--title-color);\n  margin: 10px 0;\n  position: relative;\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -15px;\n    left: 0;\n    width: 110%;\n    height: 2px;\n  }\n`;","import styled from '@emotion/styled';\n\nexport const StyledContentLink = styled.a`\n  text-decoration: none;\n\n  &:hover > * {\n    cursor: pointer;\n    color: var(--primary-color);\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledImageContainer = styled.div`\n  min-width: 300px;\n  min-height: 200px;\n  position: relative;\n\n  & .gatsby-image-wrapper * {\n    transition: transform var(--transition-fast) ease-in-out !important;\n  }\n\n  &:hover .gatsby-image-wrapper * {\n    transform: scale(1.1);\n  }\n`;\n\nexport const StyledStaticImageContainer = styled.div`\n  min-width: 300px;\n  min-height: 200px;\n  position: relative;\n\n  .gatsby-image-wrapper {\n    overflow: unset !important;\n  }\n\n  .gatsby-image-wrapper:before {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    right: -10px;\n    width: 98%;\n    height: 98%;\n    border: 2px solid var(--primary-color);\n    transition: all ease var(--transition-fast);\n  }\n`;\n"],"sourceRoot":""}